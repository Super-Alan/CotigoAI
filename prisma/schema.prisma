// Cogito AI - Prisma Schema
// Database Schema for Critical Thinking AI Platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============ 用户认证 ============
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关系
  accounts                        Account[]
  sessions                        Session[]
  conversations                   Conversation[]
  argumentAnalyses                ArgumentAnalysis[]
  perspectiveSessions             PerspectiveSession[]
  generatedTopics                 GeneratedConversationTopic[]
  settings                        UserSettings?
  lessonProgress                  UserLessonProgress[]
  bookmarks                       LearningBookmark[]
  practiceSessions                PracticeSession[]
  userAnswers                     UserAnswer[]
  dailyStreaks                    DailyStreak[]
  userAchievements                UserAchievement[]
  criticalThinkingProgress        CriticalThinkingProgress[]
  criticalThinkingPracticeSessions CriticalThinkingPracticeSession[]
  suggestedAnswerSets             ConversationSuggestedAnswerSet[]
  knowledgePointMastery           KnowledgePointMastery[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============ 用户设置 ============
model UserSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  defaultModel    String   @default("deepseek-v3.1")
  theme           String   @default("light")
  language        String   @default("zh-CN")
  enableAnalytics Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// ============ 苏格拉底对话 ============
model Conversation {
  id        String   @id @default(cuid())
  userId    String?
  title     String   @default("新对话")
  topic     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  suggestedAnswerSets ConversationSuggestedAnswerSet[]

  @@index([userId, createdAt])
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String
  content        String   @db.Text
  metadata       Json?
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@map("messages")
}

// ============ 建议答案缓存 ============
model ConversationSuggestedAnswerSet {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  question       String   @db.Text
  suggestions    Json     // { suggestions: [{id, text, intent, difficulty}] }
  roundIndex     Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, question])
  @@index([userId, createdAt])
  @@map("conversation_suggested_answer_sets")
}

// ============ 论点解构器 ============
model ArgumentAnalysis {
  id        String   @id @default(cuid())
  userId    String
  inputText String   @db.Text
  analysis  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("argument_analyses")
}

// ============ 多棱镜视角 ============
model PerspectiveSession {
  id        String   @id @default(cuid())
  userId    String
  topic     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  perspectives Perspective[]
  messages     PerspectiveMessage[]

  @@index([userId, createdAt])
  @@map("perspective_sessions")
}

model Perspective {
  id         String   @id @default(cuid())
  sessionId  String
  roleName   String
  roleConfig Json
  viewpoint  String   @db.Text
  createdAt  DateTime @default(now())

  session  PerspectiveSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  messages PerspectiveMessage[]

  @@index([sessionId])
  @@map("perspectives")
}

model PerspectiveMessage {
  id            String   @id @default(cuid())
  sessionId     String
  perspectiveId String?
  role          String
  content       String   @db.Text
  createdAt     DateTime @default(now())

  session     PerspectiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  perspective Perspective?       @relation(fields: [perspectiveId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@map("perspective_messages")
}

// ============ 话题生成与推荐 ============
model GeneratedConversationTopic {
  id                   String   @id @default(cuid())
  userId               String?
  topic                String   @db.Text
  category             String
  context              String   @db.Text
  referenceUniversity  String
  dimension            String   // causal_analysis | premise_challenge | fallacy_detection | iterative_reflection | connection_transfer
  difficulty           String   // beginner | intermediate | advanced
  tags                 String[]
  thinkingFramework    Json     // { coreChallenge, commonPitfalls, excellentResponseIndicators }
  guidingQuestions     Json     // Array of { level, stage, question }
  expectedOutcomes     String[]
  isPublic             Boolean  @default(false) // 是否为公开话题（系统预生成）
  usageCount           Int      @default(0) // 使用次数统计
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([isPublic, dimension, difficulty])
  @@index([usageCount])
  @@map("generated_conversation_topics")
}

// ============ 系统配置 (管理端) ============
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  category  String
  isSecret  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

// ============ 学习中心 ============

// 逻辑谬误与偏差库
model LogicalFallacy {
  id              String   @id @default(cuid())
  name            String   // 谬误名称，如"人身攻击"
  nameEn          String   // 英文名称，如"Ad Hominem"
  category        String   // 分类：formal_fallacy | informal_fallacy | cognitive_bias
  definition      String   @db.Text // 定义
  identifySignals String[] // 识别信号
  countermeasures String[] // 对策
  examples        Json     // 示例 [{scenario, description, analysis}]
  difficulty      String   @default("beginner") // beginner | intermediate | advanced
  tags            String[] // 标签
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([category, difficulty])
  @@map("logical_fallacies")
}

// 论证结构与写作模板
model ArgumentTemplate {
  id          String   @id @default(cuid())
  name        String   // 模板名称，如"PEEL"
  fullName    String   // 完整名称，如"Point-Evidence-Explain-Link"
  category    String   // 分类：structure | framework | technique
  description String   @db.Text // 描述
  structure   Json     // 结构定义 [{step, title, description, example}]
  examples    Json     // 完整示例 [{topic, content, analysis}]
  useCases    String[] // 适用场景
  difficulty  String   @default("beginner") // beginner | intermediate | advanced
  tags        String[] // 标签
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category, difficulty])
  @@map("argument_templates")
}

// 方法论微课
model MethodologyLesson {
  id           String   @id @default(cuid())
  title        String   // 课程标题
  category     String   // 分类：sampling | experiment | statistics | ethics
  description  String   @db.Text // 课程描述
  content      Json     // 课程内容 [{section, title, content, type}]
  interactions Json     // 交互式任务 [{type, question, options, answer, explanation}]
  selfTest     Json     // 自测题目 [{question, type, options, correctAnswer, explanation}]
  duration     Int      // 预计学习时长（分钟）
  difficulty   String   @default("beginner") // beginner | intermediate | advanced
  prerequisites String[] // 前置知识
  learningGoals String[] // 学习目标
  tags         String[] // 标签
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 用户学习进度
  progress UserLessonProgress[]

  @@index([category, difficulty])
  @@map("methodology_lessons")
}

// 话题包
model TopicPackage {
  id                String   @id @default(cuid())
  title             String   // 话题标题
  category          String   // 分类：policy | technology | social
  description       String   @db.Text // 话题描述
  context           String   @db.Text // 背景信息
  perspectives      Json     // 多视角陈述 [{stakeholder, position, arguments, evidence}]
  visualDeconstruction Json  // 可视化解构 [{type, data, description}]
  dialogueRoutes    Json     // 对话路线 [{route, questions, expectedOutcomes}]
  keyTerms          Json     // 关键术语 [{term, definition}]
  relatedFallacies  String[] // 相关谬误ID
  relatedTemplates  String[] // 相关模板ID
  difficulty        String   @default("intermediate") // beginner | intermediate | advanced
  tags              String[] // 标签
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([category, difficulty])
  @@map("topic_packages")
}

// 用户学习进度
model UserLessonProgress {
  id           String   @id @default(cuid())
  userId       String
  lessonId     String
  status       String   @default("not_started") // not_started | in_progress | completed
  progress     Float    @default(0) // 0-100
  testScore    Float?   // 自测分数
  timeSpent    Int      @default(0) // 学习时长（分钟）
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson MethodologyLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId, status])
  @@map("user_lesson_progress")
}

// 学习收藏夹
model LearningBookmark {
  id           String   @id @default(cuid())
  userId       String
  resourceType String   // fallacy | template | lesson | topic
  resourceId   String
  notes        String?  @db.Text // 用户笔记
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceType, resourceId])
  @@index([userId, resourceType])
  @@map("learning_bookmarks")
}

// ============ 每日练习打卡系统 ============

// 练习会话
model PracticeSession {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  sessionType     String   @map("session_type") // fallacies | arguments | methodology | topics | mixed
  duration        Int      @default(600) // 10分钟 = 600秒
  totalQuestions  Int      @map("total_questions") @default(5)
  correctAnswers  Int      @map("correct_answers") @default(0)
  score           Float    @default(0.00)
  metadata        Json     @default("{}")
  startedAt       DateTime @map("started_at") @default(now())
  completedAt     DateTime? @map("completed_at")
  createdAt       DateTime @map("created_at") @default(now())
  updatedAt       DateTime @map("updated_at") @updatedAt

  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions PracticeQuestion[]

  @@index([userId, createdAt])
  @@map("practice_sessions")
}

// 练习题目
model PracticeQuestion {
  id            String   @id @default(cuid())
  sessionId     String   @map("session_id")
  questionType  String   @map("question_type") // multiple_choice | true_false | analysis | matching
  content       Json     // 题目内容
  options       Json?    // 选项
  correctAnswer String   @map("correct_answer") // 正确答案
  explanation   Json     // 解析
  difficulty    Int      @default(1) // 1-5
  sourceContent String?  @map("source_content") // 来源内容ID
  createdAt     DateTime @map("created_at") @default(now())

  session PracticeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  answers UserAnswer[]

  @@index([sessionId])
  @@map("practice_questions")
}

// 用户答案
model UserAnswer {
  id         String   @id @default(cuid())
  questionId String   @map("question_id")
  userId     String   @map("user_id")
  answer     String
  isCorrect  Boolean  @map("is_correct") @default(false)
  timeSpent  Int      @map("time_spent") @default(0) // 答题用时（秒）
  answeredAt DateTime @map("answered_at") @default(now())

  question PracticeQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
  @@map("user_answers")
}

// 每日打卡
model DailyStreak {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  practiceDate DateTime @map("practice_date") @db.Date
  completed    Boolean  @default(false)
  streakCount  Int      @map("streak_count") @default(0)
  createdAt    DateTime @map("created_at") @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, practiceDate])
  @@index([userId, practiceDate])
  @@map("daily_streaks")
}

// 成就
model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String   // streak | accuracy | speed | knowledge | milestone
  criteria    Json     // 成就条件
  badgeIcon   String?  @map("badge_icon")
  rarity      Int      @default(1) // 1=普通, 5=传奇
  createdAt   DateTime @map("created_at") @default(now())

  userAchievements UserAchievement[]

  @@map("achievements")
}

// 用户成就
model UserAchievement {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  achievementId String   @map("achievement_id")
  earnedAt      DateTime @map("earned_at") @default(now())
  progress      Json     @default("{}")

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@map("user_achievements")
}

// ============ 批判性思维训练系统 ============

// 思维类型
model ThinkingType {
  id              String   @id // causal_analysis, premise_challenge, fallacy_detection, iterative_reflection, connection_transfer
  name            String   // 思维类型名称
  description     String   @db.Text // 描述
  icon            String   // 图标名称
  learningContent Json     // 学习内容 {framework, methods, examples}
  createdAt       DateTime @default(now())

  questions    CriticalThinkingQuestion[]
  userProgress CriticalThinkingProgress[]

  @@map("thinking_types")
}

// 批判性思维练习题目
model CriticalThinkingQuestion {
  id                String   @id @default(cuid())
  thinkingTypeId    String
  difficulty        String   // beginner | intermediate | advanced
  topic             String   @db.Text
  context           String   @db.Text
  question          String   @db.Text // 主要问题
  tags              Json     // 标签 (环境经济学, 气候变化, 经济政策等)
  thinkingFramework Json     // 思维框架
  expectedOutcomes  Json     // 预期结果
  caseAnalysis      Json?    // AI生成的案例分析 {overview, keyPoints, framework, examples, pitfalls, recommendations, mindmap}
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  thinkingType              ThinkingType                      @relation(fields: [thinkingTypeId], references: [id], onDelete: Cascade)
  guidingQuestions          CriticalThinkingGuidingQuestion[]
  practiceSessions          CriticalThinkingPracticeSession[]
  intelligentGuidedCache    IntelligentGuidedQuestionCache?   // AI生成的智能引导缓存

  @@index([thinkingTypeId])
  @@index([difficulty])
  @@index([createdAt])
  @@map("critical_thinking_questions")
}

// 引导问题
model CriticalThinkingGuidingQuestion {
  id         String   @id @default(cuid())
  questionId String
  level      String   // beginner | intermediate | advanced
  stage      String   // 阶段标识
  question   String   @db.Text
  orderIndex Int      // 排序索引

  parentQuestion CriticalThinkingQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, level, orderIndex])
  @@index([questionId])
  @@index([level])
  @@map("critical_thinking_guiding_questions")
}

// 用户思维类型进度
model CriticalThinkingProgress {
  id                   String   @id @default(cuid())
  userId               String
  thinkingTypeId       String
  progressPercentage   Int      @default(0) // 0-100
  questionsCompleted   Int      @default(0)
  averageScore         Float    @default(0.0)
  lastUpdated          DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  thinkingType ThinkingType @relation(fields: [thinkingTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, thinkingTypeId])
  @@index([userId])
  @@index([thinkingTypeId])
  @@map("critical_thinking_progress")
}

// 批判性思维练习会话
model CriticalThinkingPracticeSession {
  id                String   @id @default(cuid())
  userId            String
  questionId        String
  answers           Json     // 分层级答案
  score             Int?     // 0-100
  aiFeedback        String?  @db.Text
  evaluationDetails Json?    // 评估详情
  reflection        Json?    // 反思总结 { learned: string, nextSteps: string, questions?: string }
  timeSpent         Int      // 答题用时（秒）
  completedAt       DateTime @default(now())

  user     User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question CriticalThinkingQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
  @@index([completedAt])
  @@index([score])
  @@map("critical_thinking_practice_sessions")
}

// AI生成的智能引导问题缓存
// 用于存储和复用AI为特定题目生成的个性化引导问题
model IntelligentGuidedQuestionCache {
  id                  String   @id @default(cuid())
  questionId          String   // 关联的题目ID
  thinkingType        String   // 思维维度 (causal_analysis | premise_challenge | etc)
  difficulty          String   // 难度等级 (beginner | intermediate | advanced)
  guidedQuestions     Json     // AI生成的引导问题数组 [{ question, purpose, thinkingDirection, keywords }]
  thinkingPath        String   @db.Text // 思维路径描述
  expectedInsights    String[] // 期望获得的洞察
  generatedBy         String   @default("ai") // 生成方式: ai | manual | preset
  usageCount          Int      @default(0) // 使用次数统计
  qualityRating       Float?   // 质量评分 (0-5)，可由用户反馈或系统评估
  isActive            Boolean  @default(true) // 是否启用
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  lastUsedAt          DateTime? // 最后使用时间

  question CriticalThinkingQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId]) // 每个题目只有一个智能引导缓存
  @@index([thinkingType, difficulty])
  @@index([usageCount])
  @@index([qualityRating])
  @@index([createdAt])
  @@map("intelligent_guided_question_cache")
}

// ============ 知识点掌握度追踪系统 ============

// 知识点掌握度追踪
// 用于追踪用户对每个思维维度下各个核心概念的掌握情况
model KnowledgePointMastery {
  id             String   @id @default(cuid())
  userId         String
  thinkingTypeId String   // 思维维度ID (causal_analysis | premise_challenge | etc)
  conceptKey     String   // 概念标识符 (correlation_vs_causation | confounding_factors | etc)
  masteryLevel   Float    @default(0.0) // 掌握度 (0-1)
  lastPracticed  DateTime @default(now()) // 最后练习时间
  practiceCount  Int      @default(0) // 练习次数
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, thinkingTypeId, conceptKey])
  @@index([userId, lastPracticed])
  @@index([userId, masteryLevel])
  @@index([thinkingTypeId, conceptKey])
  @@map("knowledge_point_mastery")
}

// ============ 每日批判性问题库 ============
// 系统问题库：包含常见批判性思维问题、升学面试话题、社会热点话题
model DailyCriticalQuestion {
  id            String   @id @default(cuid())
  question      String   @db.Text // 问题内容
  category      String   // critical_thinking | interview | social_issue
  subcategory   String?  // 细分类别 (如：逻辑推理、时事分析、伦理道德等)
  difficulty    String   @default("intermediate") // beginner | intermediate | advanced
  tags          Json     @default("[]") // 标签数组
  thinkingTypes Json     @default("[]") // 关联的思维维度ID数组
  context       String?  @db.Text // 背景信息或补充说明
  isActive      Boolean  @default(true) // 是否启用
  usageCount    Int      @default(0) // 使用次数
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([category, isActive])
  @@index([difficulty])
  @@index([createdAt])
  @@map("daily_critical_questions")
}
