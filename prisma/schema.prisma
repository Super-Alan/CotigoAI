generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                                             String                            @id @default(cuid())
  name                                                           String?
  email                                                          String                            @unique
  emailVerified                                                  DateTime?
  image                                                          String?
  password                                                       String?
  createdAt                                                      DateTime                          @default(now())
  updatedAt                                                      DateTime                          @updatedAt
  accounts                                                       Account[]
  adminUser                                                      AdminUser?
  argumentAnalyses                                               ArgumentAnalysis[]
  conversations                                                  Conversation[]
  criticalThinkingPracticeSessions                               CriticalThinkingPracticeSession[]
  criticalThinkingProgress                                       CriticalThinkingProgress[]
  dailyStreaks                                                   DailyStreak[]
  generatedTopics                                                GeneratedConversationTopic[]
  knowledgePointMastery                                          KnowledgePointMastery[]
  knowledge_point_mastery_knowledge_point_mastery_user_idTousers KnowledgePointMastery[]           @relation("knowledge_point_mastery_user_idTousers")
  perspectiveSessions                                            PerspectiveSession[]
  practiceSessions                                               PracticeSession[]
  sessions                                                       Session[]
  userAchievements                                               UserAchievement[]
  userAnswers                                                    UserAnswer[]
  settings                                                       UserSettings?
  theoryProgress                                                 TheoryProgress[]
  theoryContentFeedback                                          TheoryContentFeedback[] // V3新增
  learningPathStates                                             LearningPathState[]
  userPreferences                                                UserPreferences?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model UserSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  defaultModel    String   @default("deepseek-v3.1")
  theme           String   @default("light")
  language        String   @default("zh-CN")
  enableAnalytics Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Conversation {
  id               String    @id @default(cuid())
  userId           String?
  title            String    @default("新对话")
  topic            String?
  // 新增: 对话分类和时长追踪
  conversationType String    @default("general") // general | daily_question | ai_tutor | socratic_dialogue
  timeSpent        Int       @default(0)         // 总时长(秒)
  messageCount     Int       @default(0)         // 消息数量
  status           String    @default("active")  // active | completed | archived
  completedAt      DateTime?                     // 完成时间
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages         Message[]

  @@index([userId, createdAt])
  @@index([userId, conversationType, createdAt])
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String
  content        String
  metadata       Json?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@map("messages")
}

model ArgumentAnalysis {
  id        String    @id @default(cuid())
  userId    String
  inputText String
  analysis  Json
  // 新增: 时长和状态追踪
  timeSpent Int       @default(0) // 分析时长(秒)
  status    String    @default("completed") // draft | completed
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("argument_analyses")
}

model PerspectiveSession {
  id           String               @id @default(cuid())
  userId       String
  topic        String
  // 新增: 时长和状态追踪
  timeSpent    Int                  @default(0)       // 总时长(秒)
  status       String               @default("active") // active | completed
  completedAt  DateTime?                               // 完成时间
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  messages     PerspectiveMessage[]
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  perspectives Perspective[]

  @@index([userId, createdAt])
  @@map("perspective_sessions")
}

model Perspective {
  id         String               @id @default(cuid())
  sessionId  String
  roleName   String
  roleConfig Json
  viewpoint  String
  createdAt  DateTime             @default(now())
  messages   PerspectiveMessage[]
  session    PerspectiveSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@map("perspectives")
}

model PerspectiveMessage {
  id            String             @id @default(cuid())
  sessionId     String
  perspectiveId String?
  role          String
  content       String
  createdAt     DateTime           @default(now())
  perspective   Perspective?       @relation(fields: [perspectiveId], references: [id], onDelete: Cascade)
  session       PerspectiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@map("perspective_messages")
}

model GeneratedConversationTopic {
  id                  String   @id @default(cuid())
  userId              String?
  topic               String
  category            String
  context             String
  referenceUniversity String
  dimension           String
  difficulty          String
  tags                String[]
  thinkingFramework   Json
  guidingQuestions    Json
  expectedOutcomes    String[]
  isPublic            Boolean  @default(false)
  usageCount          Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([isPublic, dimension, difficulty])
  @@index([usageCount])
  @@map("generated_conversation_topics")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String
  isSecret  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

model PracticeSession {
  id             String             @id @default(cuid())
  userId         String             @map("user_id")
  sessionType    String             @map("session_type")
  duration       Int                @default(600)
  totalQuestions Int                @default(5) @map("total_questions")
  correctAnswers Int                @default(0) @map("correct_answers")
  score          Decimal            @default(0.00) @db.Decimal(5, 2)
  metadata       String             @default("{}")
  startedAt      DateTime           @default(now()) @map("started_at") @db.Timestamp(6)
  completedAt    DateTime?          @map("completed_at") @db.Timestamp(6)
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  questions      PracticeQuestion[]
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([createdAt(sort: Desc)], map: "idx_practice_sessions_created_at")
  @@index([userId], map: "idx_practice_sessions_user_id")
  @@map("practice_sessions")
}

model PracticeQuestion {
  id            String          @id @default(cuid())
  sessionId     String          @map("session_id")
  questionType  String          @map("question_type")
  content       String
  options       String?
  correctAnswer String          @map("correct_answer")
  explanation   String
  difficulty    Int             @default(1)
  sourceContent String?         @map("source_content")
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  session       PracticeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  answers       UserAnswer[]

  @@index([sessionId], map: "idx_practice_questions_session_id")
  @@map("practice_questions")
}

model UserAnswer {
  id         String           @id @default(cuid())
  questionId String           @map("question_id")
  userId     String           @map("user_id")
  answer     String
  isCorrect  Boolean          @default(false) @map("is_correct")
  timeSpent  Int              @default(0) @map("time_spent")
  answeredAt DateTime         @default(now()) @map("answered_at") @db.Timestamp(6)
  question   PracticeQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([questionId], map: "idx_user_answers_question_id")
  @@index([userId], map: "idx_user_answers_user_id")
  @@map("user_answers")
}

model DailyStreak {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  practiceDate DateTime @map("practice_date") @db.Date
  completed    Boolean  @default(false)
  streakCount  Int      @default(0) @map("streak_count")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, practiceDate])
  @@index([userId, practiceDate(sort: Desc)], map: "idx_daily_streaks_user_date")
  @@map("daily_streaks")
}

model Achievement {
  id               String            @id @default(cuid())
  name             String
  description      String
  category         String
  criteria         Json
  badgeIcon        String?           @map("badge_icon")
  rarity           Int               @default(1)
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  achievementId String      @map("achievement_id")
  earnedAt      DateTime    @default(now()) @map("earned_at") @db.Timestamp(6)
  progress      String      @default("{}")
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, achievementId])
  @@index([userId], map: "idx_user_achievements_user_id")
  @@map("user_achievements")
}

model ThinkingType {
  id                   String                     @id
  name                 String
  description          String
  icon                 String
  learningContent      Json
  createdAt            DateTime                   @default(now())
  userProgress         CriticalThinkingProgress[]
  questions            CriticalThinkingQuestion[]
  levelLearningContent LevelLearningContent[]
  theoryContents       TheoryContent[]

  @@map("thinking_types")
}

model CriticalThinkingQuestion {
  id                     String                            @id @default(cuid())
  thinkingTypeId         String
  topic                  String
  context                String
  question               String
  tags                   Json
  thinkingFramework      Json
  expectedOutcomes       Json
  caseAnalysis           Json?
  level                  Int                               @default(1) // Level 1-5
  learningObjectives     Json?                             // 学习目标
  scaffolding            Json?                             // 思维脚手架（Level 1-3使用）
  assessmentCriteria     Json?                             // 评估标准
  createdAt              DateTime                          @default(now())
  updatedAt              DateTime                          @updatedAt
  guidingQuestions       CriticalThinkingGuidingQuestion[]
  practiceSessions       CriticalThinkingPracticeSession[]
  thinkingType           ThinkingType                      @relation(fields: [thinkingTypeId], references: [id], onDelete: Cascade)
  intelligentGuidedCache IntelligentGuidedQuestionCache?

  @@index([thinkingTypeId])
  @@index([level])
  @@index([createdAt])
  @@map("critical_thinking_questions")
}

model CriticalThinkingGuidingQuestion {
  id             String                   @id @default(cuid())
  questionId     String
  level          String
  stage          String
  question       String
  orderIndex     Int
  parentQuestion CriticalThinkingQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, level, orderIndex], map: "critical_thinking_guiding_quest_questionId_level_orderIndex_key")
  @@index([questionId])
  @@index([level])
  @@map("critical_thinking_guiding_questions")
}

model CriticalThinkingProgress {
  id                       String       @id @default(cuid())
  userId                   String
  thinkingTypeId           String
  progressPercentage       Int          @default(0)
  questionsCompleted       Int          @default(0)
  averageScore             Float        @default(0.0)
  lastUpdated              DateTime     @default(now())
  lastPracticeAt           DateTime?
  // Level 1-5 progression tracking
  currentLevel             Int          @default(1) // 当前Level (1-5)
  level1Progress           Int          @default(0) // Level 1进度 0-100
  level2Progress           Int          @default(0)
  level3Progress           Int          @default(0)
  level4Progress           Int          @default(0)
  level5Progress           Int          @default(0)
  level1Unlocked           Boolean      @default(true)  // Level 1默认解锁
  level2Unlocked           Boolean      @default(false)
  level3Unlocked           Boolean      @default(false)
  level4Unlocked           Boolean      @default(false)
  level5Unlocked           Boolean      @default(false)
  // 各Level完成题目数和平均分
  level1QuestionsCompleted Int          @default(0)
  level2QuestionsCompleted Int          @default(0)
  level3QuestionsCompleted Int          @default(0)
  level4QuestionsCompleted Int          @default(0)
  level5QuestionsCompleted Int          @default(0)
  level1AverageScore       Float        @default(0)
  level2AverageScore       Float        @default(0)
  level3AverageScore       Float        @default(0)
  level4AverageScore       Float        @default(0)
  level5AverageScore       Float        @default(0)
  thinkingType             ThinkingType @relation(fields: [thinkingTypeId], references: [id], onDelete: Cascade)
  user                     User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, thinkingTypeId])
  @@index([userId])
  @@index([thinkingTypeId])
  @@map("critical_thinking_progress")
}

model CriticalThinkingPracticeSession {
  id                String                   @id @default(cuid())
  userId            String
  questionId        String
  answers           Json
  score             Int?
  aiFeedback        String?
  evaluationDetails Json?
  timeSpent         Int
  completedAt       DateTime                 @default(now())
  // Level-based practice tracking
  level             Int                      @default(1) // 练习时的Level (1-5)
  stepProgress      Json?                    // 6步进度记录
  reflectionNotes   String?                  // 反思笔记
  improvementPlan   String?                  // 改进计划
  question          CriticalThinkingQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
  @@index([completedAt])
  @@index([score])
  @@index([level])
  @@map("critical_thinking_practice_sessions")
}

model LevelLearningContent {
  id             String       @id @default(cuid())
  thinkingTypeId String
  level          Int          // 1-5
  contentType    String       // "concepts" | "frameworks" | "examples" | "practice_guide"
  title          String
  description    String       @db.Text
  content        Json         // 内容主体（支持富文本、交互元素）
  estimatedTime  Int          // 预计学习时间（分钟）
  orderIndex     Int          // 排序
  tags           String[]     // 标签数组
  prerequisites  String[]     // 前置内容ID数组
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  thinkingType   ThinkingType @relation(fields: [thinkingTypeId], references: [id], onDelete: Cascade)

  @@unique([thinkingTypeId, level, contentType, orderIndex])
  @@index([thinkingTypeId])
  @@index([level])
  @@index([contentType])
  @@map("level_learning_content")
}

model IntelligentGuidedQuestionCache {
  id               String                   @id @default(cuid())
  questionId       String                   @unique
  thinkingType     String
  difficulty       String
  guidedQuestions  Json
  thinkingPath     String
  expectedInsights String[]
  generatedBy      String                   @default("ai")
  usageCount       Int                      @default(0)
  qualityRating    Float?
  isActive         Boolean                  @default(true)
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  lastUsedAt       DateTime?
  question         CriticalThinkingQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([thinkingType, difficulty])
  @@index([usageCount])
  @@index([qualityRating])
  @@index([createdAt])
  @@map("intelligent_guided_question_cache")
}

model KnowledgePointMastery {
  id                                           String   @id @default(cuid())
  user_id                                      String
  thinking_type_id                             String
  concept_key                                  String
  mastery_level                                Float    @default(0.0)
  last_practiced                               DateTime @default(now())
  practice_count                               Int      @default(0)
  created_at                                   DateTime @default(now())
  updated_at                                   DateTime
  userId                                       String
  thinkingTypeId                               String
  conceptKey                                   String
  masteryLevel                                 Float    @default(0.0)
  lastPracticed                                DateTime @default(now())
  practiceCount                                Int      @default(0)
  createdAt                                    DateTime @default(now())
  updatedAt                                    DateTime @default(now()) @updatedAt
  user                                         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_knowledge_point_mastery_user_idTousers User     @relation("knowledge_point_mastery_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, thinkingTypeId, conceptKey])
  @@unique([user_id, thinking_type_id, concept_key])
  @@index([thinkingTypeId, conceptKey])
  @@index([thinking_type_id, concept_key])
  @@index([user_id, last_practiced])
  @@index([user_id, mastery_level])
  @@map("knowledge_point_mastery")
}

model DailyCriticalQuestion {
  id            String   @id @default(cuid())
  question      String
  category      String
  subcategory   String?
  difficulty    String   @default("intermediate")
  tags          Json     @default("[]")
  thinkingTypes Json     @default("[]")
  context       String?
  isActive      Boolean  @default(true)
  usageCount    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([category, isActive])
  @@index([difficulty])
  @@index([createdAt])
  @@map("daily_critical_questions")
}

model AdminUser {
  id          String     @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId      String     @unique
  role        AdminRole  @default(ANALYST)
  permissions Json       @default("[]")
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  logs        AdminLog[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_users")
}

model AdminLog {
  id         String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  adminId    String
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime  @default(now())
  admin      AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId, createdAt])
  @@index([action, resource])
  @@index([createdAt])
  @@map("admin_logs")
}

enum AdminRole {
  SUPER_ADMIN
  CONTENT_ADMIN
  ANALYST
}

// ============================================
// 理论体系 (Theory System) - 新增
// ============================================

model TheoryContent {
  id             String   @id @default(cuid())
  thinkingTypeId String
  level          Int      // Level 1-5

  // 基础信息
  title          String
  subtitle       String?
  description    String   @db.Text
  learningObjectives Json

  // 3个核心章节 (纯理论，不含练习)
  conceptsIntro      String?  @db.Text
  conceptsContent    Json     // 核心概念详细内容

  modelsIntro        String?  @db.Text
  modelsContent      Json     // 思维模型详细内容

  demonstrationsIntro String?  @db.Text
  demonstrationsContent Json   // 实例演示详细内容

  // 元数据
  estimatedTime      Int      // 预计学习时间（分钟）
  difficulty         String   // beginner | intermediate | advanced
  tags               String[] // 标签数组
  keywords           String[] // 关键词（用于搜索）
  prerequisites      String[] // 前置内容ID数组
  relatedTopics      String[] // 相关主题ID数组

  // 内容版本管理
  version            String   @default("1.0.0")
  isPublished        Boolean  @default(false)
  publishedAt        DateTime?

  // 内容质量指标
  qualityScore       Float?
  viewCount          Int      @default(0)
  completionRate     Float?
  userRating         Float?

  // V3新增：质量管理字段
  qualityMetrics     Json?    // 详细质量指标 (conceptsScore, modelsScore, demonstrationsScore)
  validationStatus   String   @default("draft") // draft | validated | published
  validationErrors   Json?    // 验证错误记录
  reviewNotes        String?  @db.Text // 人工审核备注
  feedbackCount      Int      @default(0) // 用户反馈数量

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // 关系
  thinkingType       ThinkingType @relation(fields: [thinkingTypeId], references: [id], onDelete: Cascade)
  userProgress       TheoryProgress[]
  contentFeedback    TheoryContentFeedback[] // V3新增：用户反馈关系

  @@unique([thinkingTypeId, level, version])
  @@index([thinkingTypeId])
  @@index([level])
  @@index([isPublished])
  @@index([difficulty])
  @@index([createdAt])
  @@index([validationStatus]) // V3新增索引
  @@map("theory_content")
}

model TheoryProgress {
  id               String   @id @default(cuid())
  userId           String
  theoryContentId  String

  // 学习进度
  status           String   @default("not_started") // not_started | in_progress | completed | reviewed
  progressPercent  Int      @default(0) // 0-100

  // 章节完成状态
  sectionsCompleted Json    @default("{}") // {concepts: false, models: false, demonstrations: false}

  // 学习时间
  timeSpent        Int      @default(0) // 秒
  startedAt        DateTime?
  completedAt      DateTime?
  lastViewedAt     DateTime @default(now())

  // 学习行为
  scrollDepth      Int      @default(0) // 滚动深度百分比
  interactionCount Int      @default(0) // 交互次数

  // 学习笔记
  notes            String?  @db.Text
  highlights       Json?    // 高亮内容
  bookmarked       Boolean  @default(false)

  // 自评
  selfRating       Int?     // 1-5分自评
  confidenceLevel  String?  // low | medium | high
  needsReview      Boolean  @default(false)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // 关系
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  theoryContent    TheoryContent @relation(fields: [theoryContentId], references: [id], onDelete: Cascade)

  @@unique([userId, theoryContentId])
  @@index([userId])
  @@index([theoryContentId])
  @@index([status])
  @@index([lastViewedAt])
  @@map("theory_progress")
}

// V3新增：理论内容用户反馈表
model TheoryContentFeedback {
  id              String   @id @default(cuid())
  theoryContentId String
  userId          String

  // 反馈类型
  feedbackType    String   // quality_issue | content_error | suggestion | praise
  section         String   // concepts | models | demonstrations | general

  // 详细反馈
  rating          Int?     // 1-5星评分
  comment         String   @db.Text
  specificIssue   Json?    // { conceptId, stepNumber, issueDescription }

  // 处理状态
  status          String   @default("pending") // pending | reviewed | resolved | dismissed
  adminResponse   String?  @db.Text
  resolvedAt      DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 关系
  theoryContent   TheoryContent @relation(fields: [theoryContentId], references: [id], onDelete: Cascade)
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([theoryContentId])
  @@index([userId])
  @@index([status])
  @@index([feedbackType])
  @@index([section])
  @@index([createdAt])
  @@map("theory_content_feedback")
}

// ============================================
// 个性化学习路径系统 (Personalized Learning Path System)
// ============================================

model LearningPathState {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 路径元数据
  pathType  String   @default("adaptive") // adaptive | linear | custom
  status    String   @default("active")   // active | paused | completed

  // 当前进度
  currentStepId     String?
  currentStepIndex  Int      @default(0)
  totalSteps        Int
  completedSteps    Int      @default(0)
  progressPercent   Int      @default(0) // 0-100的百分比进度

  // 路径配置
  targetDimensions  String[] // 目标学习维度
  learningStyle     String   @default("balanced") // theory_first | practice_first | balanced
  difficultyLevel   String   @default("auto")     // auto | beginner | intermediate | advanced

  // 时间统计
  totalTimeSpent    Int      @default(0) // 分钟
  estimatedTimeLeft Int?

  // 路径步骤（JSON）
  pathSteps         Json     // PathStep[]序列化

  // 自适应参数
  adaptiveConfig    Json?    // 自适应算法配置

  // 时间戳
  startedAt         DateTime @default(now())
  lastAccessedAt    DateTime @default(now())
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, pathType])
  @@index([userId])
  @@index([status])
  @@index([lastAccessedAt])
  @@map("learning_path_state")
}

model UserPreferences {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 学习偏好
  preferredLearningStyle String @default("balanced") // theory_first | practice_first | balanced
  preferredDifficulty    String @default("auto")     // auto | beginner | intermediate | advanced
  dailyTimeGoal          Int    @default(30)         // 每日学习目标（分钟）

  // 通知偏好
  enableReviewReminders  Boolean @default(true)
  enableProgressUpdates  Boolean @default(true)
  reminderFrequency      String  @default("daily")   // daily | weekly | off

  // 显示偏好
  showEstimatedTime      Boolean @default(true)
  showDifficultyBadges   Boolean @default(true)
  compactMode            Boolean @default(false)

  // 自适应设置
  enableAdaptivePath     Boolean @default(true)
  autoUnlockLevels       Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_preferences")
}
