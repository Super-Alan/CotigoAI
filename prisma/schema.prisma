// Cogito AI - Prisma Schema
// Database Schema for Critical Thinking AI Platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============ 用户认证 ============
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关系
  accounts            Account[]
  sessions            Session[]
  conversations       Conversation[]
  argumentAnalyses    ArgumentAnalysis[]
  perspectiveSessions PerspectiveSession[]
  settings            UserSettings?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============ 用户设置 ============
model UserSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  defaultModel    String   @default("deepseek-v3.1")
  theme           String   @default("light")
  language        String   @default("zh-CN")
  enableAnalytics Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// ============ 苏格拉底对话 ============
model Conversation {
  id        String   @id @default(cuid())
  userId    String?
  title     String   @default("新对话")
  topic     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([userId, createdAt])
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String
  content        String   @db.Text
  metadata       Json?
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@map("messages")
}

// ============ 论点解构器 ============
model ArgumentAnalysis {
  id        String   @id @default(cuid())
  userId    String
  inputText String   @db.Text
  analysis  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("argument_analyses")
}

// ============ 多棱镜视角 ============
model PerspectiveSession {
  id        String   @id @default(cuid())
  userId    String
  topic     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  perspectives Perspective[]
  messages     PerspectiveMessage[]

  @@index([userId, createdAt])
  @@map("perspective_sessions")
}

model Perspective {
  id         String   @id @default(cuid())
  sessionId  String
  roleName   String
  roleConfig Json
  viewpoint  String   @db.Text
  createdAt  DateTime @default(now())

  session  PerspectiveSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  messages PerspectiveMessage[]

  @@index([sessionId])
  @@map("perspectives")
}

model PerspectiveMessage {
  id            String   @id @default(cuid())
  sessionId     String
  perspectiveId String?
  role          String
  content       String   @db.Text
  createdAt     DateTime @default(now())

  session     PerspectiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  perspective Perspective?       @relation(fields: [perspectiveId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@map("perspective_messages")
}

// ============ 系统配置 (管理端) ============
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  category  String
  isSecret  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}
